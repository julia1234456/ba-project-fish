Creation of a docker to run GTR Algorithm 

#creation of the docker named « container_name » based on the image «  11.1.1-cudnn8-devel »

docker run --gpus all -it -d --shm-size=8gb --env="DISPLAY" --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" --mount type=bind,source=/media1/data/julia,target=/media1/data/julia --name=trackformer nvidia/cuda:10.0-base /bin/bash

                     
#go into the container 
docker exec -it container_name

#installation of python3
apt-get update 
apt-get install python3

#installation of pip 
apt-get update 
apt-get install pip 

#installation of git
apt-get update 
apt-get install git

#installer pytorch 1.10 pour cuda 11.1 (= pytorch=1.10+cu111) 
pip install torch==1.10.0+cu111 -f https://download.pytorch.org/whl/cu111/torch_stable.html

#installation of detectron2 for pytorch 1.10 and cuda 11.1 (version pytorch=1.10+cu111)
python3 -m pip install detectron2 -f \
  https://dl.fbaipublicfiles.com/detectron2/wheels/cu111/torch1.10/index.html

#installation of requirements
pip install -r requirements.txt 
/!\ this will break compatibility with torchvision 0.15.1, but torchvision 0.11 is sufficient

#installer torchvision0.11 compatible with pytorch 1.10 and cuda 11.1
pip install torchvision==0.11.1+cu111 -f https://download.pytorch.org/whl/cu111/torch_stable.html
 
At this point, when trying to run the demo you should have an error. 

apt-get install libgl1-mesa-glx
apt-get install libglib2.0-0

apt-get install build-essential cmake git python3-dev python3-numpy \
libavcodec-dev libavformat-dev libswscale-dev \
libgstreamer-plugins-base1.0-dev \
libgstreamer1.0-dev libgtk-3-dev \
libpng-dev libjpeg-dev libopenexr-dev libtiff-dev libwebp-dev \
libopencv-dev x264 libx264-dev libssl-dev ffmpeg

→ here remove all opencv you have installed  
#remove opencv 
pip uninstall opencv-python 
apt-get remove python3-opencv 

make sure the import cv2 fail
python3
import cv2 


#reinstall opencv with apt-get (very important) 
apt-get install python3-opencv 

it should work 